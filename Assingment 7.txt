
Aim: Inter-process Communication using Shared Memory using System V. Application to
demonstrate: Client and Server Programs in which server process creates a shared memory segment 
and writes the message to the shared memory segment. Client process reads the message from the 
shared memory segment and displays it to the screen. 
#include <stdio.h> 
#include <stdlib.h> 
#include <unistd.h> 
#include <sys/shm.h> 
#include <sys/stat.h> 
#define SZ 4096 
int main() { int shm_id; int 
*shm_ptr; int data, ret_val; 
int read_data; 
 int pid; 
 shm_id = shmget(IPC_PRIVATE, SZ, IPC_CREAT | 0666); 
 if (shm_id < 0) { 
 printf("\n ERROR at addressing memory\n"); 
 } else { 
 printf("Shared memory is created\n"); printf("Shared 
memory id: %d\n", shm_id); 
 shm_ptr = (int *)shmat(shm_id, NULL, 0); 

 if ((int)shm_ptr != -1) { printf("\nSHARED MEMORY IS ATTACHED TO %d
\n", (int)shm_ptr); 
 } 
 printf("\nENTER THE DATA\n"); scanf("%d", 
&data); 
 *shm_ptr = data; 
 pid = fork(); if (pid == 0) 
{ if ((int)shm_ptr != -1) { 
 printf("\nSHARED MEMORY IS ATTACHED TO %d\n", (int)shm_ptr); 
 read_data = *shm_ptr; printf("Data from shared 
memory: %d\n", *shm_ptr); 
 } 
 } 
 ret_val = shmdt((void *)shm_ptr); 
 if (ret_val == 0) { 
 printf("\nShared memory is successfully detached\n"); 
 } else { 
 printf("shmdt error\n"); 
 } 
 } 
 return 0; 
