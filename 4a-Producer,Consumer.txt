#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>  // Include the appropriate header for the sleep function

void *producer();
void *consumer();

typedef struct {
    int buff[20];
    sem_t full, empty; // used to get how many empty and full slots are in queue
} shared;

shared sh;
int item;
int in = 0, out = 0;
sem_t mutex;

int main() {
    pthread_t ptid1, ptid2, ctid1;
    sem_init(&sh.empty, 0, 20); // sem_init(name_of_semaphore , 0(always for thread) , unsigned int) [if return value -1 then error]
    // 20 slots in queue which are empty
    sem_init(&sh.full, 0, 0);
    sem_init(&mutex, 0, 1);

    pthread_create(&ptid1, NULL, producer, NULL);
    pthread_create(&ptid2, NULL, producer, NULL);
    pthread_create(&ctid1, NULL, consumer, NULL);

    pthread_join(ptid1, NULL);
    pthread_join(ctid1, NULL);
    pthread_join(ptid2, NULL);

    return 0;
}

void *producer() {
    while (1) {
        item = in;
        sem_wait(&sh.empty); // decrement value of empty
        sem_wait(&mutex);
        sh.buff[in++] = item;
        printf("\nproducer thread id and producer item: %ld, %d\n", pthread_self(), item);
        sem_post(&mutex);
        sem_post(&sh.full); // increment value of full
        sleep(2);
    }
}

void *consumer() {
    while (1) {
        while (out <= in) { // condition gthat quee in not empty
            sem_wait(&sh.full);
            sem_wait(&mutex);
            item = sh.buff[out++];
            printf("\nconsumer thread id and consumer item: %ld, %d\n", pthread_self(), item);
            sem_post(&mutex);
            sem_post(&sh.empty);
            sleep(2);
        }
    }
}


